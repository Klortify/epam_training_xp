<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="30" passed="30">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="79" started-at="2016-06-07T13:08:32Z" finished-at="2016-06-07T13:08:32Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="79" started-at="2016-06-07T13:08:32Z" finished-at="2016-06-07T13:08:32Z">
      <class name="calculator.xp.CalculatorTest">
        <test-method status="PASS" signature="testAdd()[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testAdd" duration-ms="9" started-at="2016-06-07T15:08:32Z" finished-at="2016-06-07T15:08:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAdd -->
        <test-method status="PASS" signature="testExecutionAdd()[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testExecutionAdd" duration-ms="4" started-at="2016-06-07T15:08:32Z" finished-at="2016-06-07T15:08:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExecutionAdd -->
        <test-method status="PASS" signature="testExecutionAddMultipleNumbers()[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testExecutionAddMultipleNumbers" duration-ms="1" started-at="2016-06-07T15:08:32Z" finished-at="2016-06-07T15:08:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExecutionAddMultipleNumbers -->
        <test-method status="PASS" signature="testExecutionAddMultipleNumbersWithDataProvider(java.lang.Double, [Ljava.lang.String;)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testExecutionAddMultipleNumbersWithDataProvider" duration-ms="2" started-at="2016-06-07T15:08:32Z" data-provider="inputsForMultipleOperation" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.String;@617faa95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExecutionAddMultipleNumbersWithDataProvider -->
        <test-method status="PASS" signature="testExecutionAddMultipleNumbersWithDataProvider(java.lang.Double, [Ljava.lang.String;)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testExecutionAddMultipleNumbersWithDataProvider" duration-ms="0" started-at="2016-06-07T15:08:32Z" data-provider="inputsForMultipleOperation" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.String;@1e127982]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExecutionAddMultipleNumbersWithDataProvider -->
        <test-method status="PASS" signature="testExecutionIllegalArgument()[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testExecutionIllegalArgument" duration-ms="1" started-at="2016-06-07T15:08:32Z" finished-at="2016-06-07T15:08:32Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Invalid user input]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Invalid user input
	at xp.calculator.Calculator.<init>(Calculator.java:13)
	at calculator.xp.CalculatorTest.testExecutionIllegalArgument(CalculatorTest.java:136)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:823)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:778)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1225)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1150)
	at org.testng.TestNG.runSuites(TestNG.java:1075)
	at org.testng.TestNG.run(TestNG.java:1047)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExecutionIllegalArgument -->
        <test-method status="PASS" signature="testExecutionSubtract()[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testExecutionSubtract" duration-ms="1" started-at="2016-06-07T15:08:32Z" finished-at="2016-06-07T15:08:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExecutionSubtract -->
        <test-method status="PASS" signature="testIsNotOperand(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsNotOperand" duration-ms="1" started-at="2016-06-07T15:08:32Z" data-provider="operators" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[+]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsNotOperand -->
        <test-method status="PASS" signature="testIsNotOperand(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsNotOperand" duration-ms="1" started-at="2016-06-07T15:08:32Z" data-provider="operators" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsNotOperand -->
        <test-method status="PASS" signature="testIsNotOperand(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsNotOperand" duration-ms="2" started-at="2016-06-07T15:08:32Z" data-provider="operators" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[*]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsNotOperand -->
        <test-method status="PASS" signature="testIsNotOperand(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsNotOperand" duration-ms="1" started-at="2016-06-07T15:08:32Z" data-provider="operators" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsNotOperand -->
        <test-method status="PASS" signature="testIsNotOperator(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsNotOperator" duration-ms="1" started-at="2016-06-07T15:08:32Z" data-provider="operands" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsNotOperator -->
        <test-method status="PASS" signature="testIsNotOperator(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsNotOperator" duration-ms="1" started-at="2016-06-07T15:08:32Z" data-provider="operands" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsNotOperator -->
        <test-method status="PASS" signature="testIsNotOperator(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsNotOperator" duration-ms="1" started-at="2016-06-07T15:08:32Z" data-provider="operands" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsNotOperator -->
        <test-method status="PASS" signature="testIsNotOperator(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsNotOperator" duration-ms="1" started-at="2016-06-07T15:08:32Z" data-provider="operands" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3.14]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsNotOperator -->
        <test-method status="PASS" signature="testIsNotOperator(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsNotOperator" duration-ms="1" started-at="2016-06-07T15:08:32Z" data-provider="operands" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsNotOperator -->
        <test-method status="PASS" signature="testIsNotOperator(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsNotOperator" duration-ms="0" started-at="2016-06-07T15:08:32Z" data-provider="operands" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsNotOperator -->
        <test-method status="PASS" signature="testIsOperand(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsOperand" duration-ms="0" started-at="2016-06-07T15:08:32Z" data-provider="operands" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsOperand -->
        <test-method status="PASS" signature="testIsOperand(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsOperand" duration-ms="0" started-at="2016-06-07T15:08:32Z" data-provider="operands" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsOperand -->
        <test-method status="PASS" signature="testIsOperand(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsOperand" duration-ms="1" started-at="2016-06-07T15:08:32Z" data-provider="operands" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsOperand -->
        <test-method status="PASS" signature="testIsOperand(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsOperand" duration-ms="1" started-at="2016-06-07T15:08:32Z" data-provider="operands" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3.14]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsOperand -->
        <test-method status="PASS" signature="testIsOperand(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsOperand" duration-ms="0" started-at="2016-06-07T15:08:32Z" data-provider="operands" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsOperand -->
        <test-method status="PASS" signature="testIsOperand(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsOperand" duration-ms="0" started-at="2016-06-07T15:08:32Z" data-provider="operands" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsOperand -->
        <test-method status="PASS" signature="testIsOperator(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsOperator" duration-ms="0" started-at="2016-06-07T15:08:32Z" data-provider="operators" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[+]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsOperator -->
        <test-method status="PASS" signature="testIsOperator(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsOperator" duration-ms="1" started-at="2016-06-07T15:08:32Z" data-provider="operators" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsOperator -->
        <test-method status="PASS" signature="testIsOperator(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsOperator" duration-ms="0" started-at="2016-06-07T15:08:32Z" data-provider="operators" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[*]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsOperator -->
        <test-method status="PASS" signature="testIsOperator(java.lang.String)[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testIsOperator" duration-ms="1" started-at="2016-06-07T15:08:32Z" data-provider="operators" finished-at="2016-06-07T15:08:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsOperator -->
        <test-method status="PASS" signature="testMultiply()[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testMultiply" duration-ms="1" started-at="2016-06-07T15:08:32Z" finished-at="2016-06-07T15:08:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultiply -->
        <test-method status="PASS" signature="testSubtract()[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testSubtract" duration-ms="0" started-at="2016-06-07T15:08:32Z" finished-at="2016-06-07T15:08:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubtract -->
        <test-method status="PASS" signature="testValidateInputOrder()[pri:0, instance:calculator.xp.CalculatorTest@7946e1f4]" name="testValidateInputOrder" duration-ms="1" started-at="2016-06-07T15:08:32Z" finished-at="2016-06-07T15:08:32Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Invalid user input]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Invalid user input
	at xp.calculator.Calculator.<init>(Calculator.java:13)
	at calculator.xp.CalculatorTest.testValidateInputOrder(CalculatorTest.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:823)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:778)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1225)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1150)
	at org.testng.TestNG.runSuites(TestNG.java:1075)
	at org.testng.TestNG.run(TestNG.java:1047)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidateInputOrder -->
      </class> <!-- calculator.xp.CalculatorTest -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
